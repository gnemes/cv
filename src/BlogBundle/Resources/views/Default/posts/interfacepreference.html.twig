{% extends 'BlogBundle:Default:posts/base.html.twig' %}

{% block socialContent %}
<meta property="og:title" content="Magento 2 - Preferencias sobre interfaces" />
<meta property="og:type" content="article" />
<meta property="og:article:author" content="German Nemes" />
<meta property="og:url" content="http://gnemes.com.ar/blog/post/1" />
<meta property="og:image" content="http://gnemes.com.ar/img/posts/preference.jpg" />    
<meta property="og:description" content="Magento 2 es todo un nuevo mundo por descubrir. En este post queria comentarles sobre una particularidad con la que me encontre al estar trabajando en un proyecto que incluia preferencias sobre interfaces." />    
{% endblock %}

{% block post %}
<div class="single-grid">
    <img src="{{ asset('img/posts/preference.jpg') }}" alt="Preferencias sobre interfaces"/>
    <p>
        <h3>Magento 2 - Preferencias sobre interfaces</h3>
    </p>
    <p>
        Magento 2 es un mundo nuevo para todos los desarrolladores, y a&uacute;n un año 
        despu&eacute;s de su lanzamiento, continuamos aprendiendo sobre el. Llevo varios meses y un par 
        de proyectos trabajando sobre Magento 2, y al d&iacute;a de hoy sigo en la etapa de descubrimiento, 
        formandome ideas sobre cual es la mejor manera de hacer ciertas cosas.
    </p>
    <p>
        Magento 2 incorpora los Plugins, que permiten agregar funcionalidad a
        clases existentes, sin la necesidad de reescribirlas. Este es por ejemplo
        un punto en que estoy intentando formarme una
        idea sobre cual soluci&oacute;n es mejor. 
        ¿Conviene usar plugins por sobre rewrites (preferences en Magento 2)?
        ¿En que casos conviene usar cada t&eacute;cnica?        
    </p>
    <p>
        En lo personal, y esto es puramente una opinion personal basada &uacute;nicamente
        en mi experiencia con Magento 2, el problema que le encuentro a los Plugins es la trazabilidad. 
        En proyectos grandes y que se prolongan en el tiempo, donde el equipo de desarrollo es relativamente
        grande y va cambiando al transcurrir los meses, los Plugins me generaron 
        problemas. Muchas veces ve&iacute;a que cierta funcionalidad que estaba haciendo no andaba, 
        y comenzaban a aparecer clases Interceptor (clases que Magento 2 genera para manejar los Plugins)
        que no ten&iacute;a idea de donde ven&iacute;an. Esto no quiere decir que soy anti-Plugins,
        y que hay que exorcizarlos del c&oacute;digo. Los uso, y los uso bastante,
        pero trato de utilizarlos a conciencia, cuando hacer un rewrite implica
        replicar demasiado c&oacute;digo sin sentido.
    </p>
    <p>
        En este post no voy a hablar de como crear un Plugin o una Preference, sino que 
        quiero mostrar una particularidad con la que me encontr&eacute; al trabajar con Preferences.
        Quiz&aacute;s, lo que voy a desarrollar en el post resulte obvio para muchos, pero
        a mi me tuvo varias horas agarr&aacute;ndome la cabeza, hasta que entend&iacute; que estaba
        sucediendo. Para graficar mi ejemplo, voy a desarrollar un feature sin mucho sentido,
        pero que a fines did&aacute;cticos cumple con su objetivo.
    </p>
    <p>
        <h4>Vamos al ejemplo...</h4>
    </p>    
    <p>
        Supongamos que por un misterio de la vida nos llega de parte de un cliente
        un requerimiento para hacer que el nombre de todos los productos se muestre
        siempre como <strong>"Gnemes Blog :: " + el nombre del producto</strong>. Requerimiento extraño...
        pero esas cosas pasan.
    </p>
    <p>
        Entonces vamos al modelo de productos:
    </p>
    <pre><code class="language-bash">
        \Magento\Catalog\Model\Product
    </code></pre>
    <p>
        Y vemos que tiene un metodo getName():
    </p>
    <pre><code class="language-php">
    public function getName()
    {
        return $this->_getData(self::NAME);
    }        
    </code></pre>
    <p>
        Genial! En este punto, es muy claro que podr&iacute;amos usar un Plugin sin ning&uacute;n problema,
        pero como estamos analizando las Preferences, hag&aacute;moslo con un rewrite. Creamos un modulo bien simple:
    </p>
    <pre><code class="language-bash">
    Gnemes
        └── Blog
            ├── etc
            │   ├── di.xml
            │   └── module.xml
            ├── registration.php
            └── Rewrite
                └── Magento
                    └── Catalog
                        └── Model
                            └── Product.php
    </code></pre>
    <p>
        Como somos desarrolladores prolijos, vamos a crear la preferencia usando la interfaz del modelo
        de productos, entonces completamos nuestro <strong>di.xml</strong> con lo siguiente:
    </p>
    <pre><code class="language-xml">
    &lt;?xml version="1.0"?&gt;
    &lt;config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
            xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd"&gt;

        &lt;preference for="Magento\Catalog\Api\Data\ProductInterface"
                    type="Gnemes\Blog\Rewrite\Magento\Catalog\Model\Product" /&gt;

    &lt;/config&gt;
    </code></pre>    
    <p>
        Y el c&oacute;digo de nuestra nueva clase Product es bastante simple:
    </p>
    <pre><code class="language-php">
    namespace Gnemes\Blog\Rewrite\Magento\Catalog\Model;

    class Product
        extends \Magento\Catalog\Model\Product
        implements \Magento\Catalog\Api\Data\ProductInterface
    {
        /**
         * Get product name
         *
         * @return string
         * @codeCoverageIgnoreStart
         */
        public function getName()
        {
            return "Gnemes Blog :: ".$this->_getData(self::NAME);
        }    
    }    
    </code></pre>
    <p>
        Listo!! Estamos a solo un F5 de completar nuestro requerimiento y... NO ANDA! Los productos muestran el nombre
        sin nuestro agregado. ¿¿Que pas&oacute;??
    </p>
    <p>
        <h4>¿Que paso?</h4>
    </p> 
    <p>
        Cuando comenc&eacute; a trabajar con Magento 2 y su inyecci&oacute;n de dependencias,
        me encontr&eacute; con much&iacute;simos constructores de clase que recib&iacute;an como 
        parametro una interfaz en lugar de una clase. Esto me pareci&oacute; genial,
        ya que en definitiva, lo que conocemos de un m&oacute;dulo desarrollado por terceros
        (o lo &uacute;nico que deber&iacute;amos conocer) es su capa de service contract, o sea, las
        interfaces que implementa. Si el d&iacute;a de mañana decidiesen cambiar la implementaci&oacute;n
        utilizando otra clase, pero mantuviesen la compatibilidad al utilizar la misma
        interfaz declarada en el service contract, todo c&oacute;digo deber&iacute;a seguir funcionando
        sin problemas.
    </p>
    <p>
        Hasta hace poco cre&iacute;a que si colocaba una Preference sobre una interfaz,
        Magento 2 autom&aacute;ticamente iba a detectar cada vez que necesitaba instanciar
        una clase, que interfaces implementa e instanciar la clase que corresponde
        de acuerdo a las preferencias existentes. Pero como vimos en el ejemplo, 
        esto no funciona de esa manera.
    </p>
    <p>
        El problema surge, hasta donde pude investigar por ahora, con los <strong>factories
        autogenerados por Magento 2</strong> y con las <strong>Collections</strong>.
    </p>
    <p>
        <h4>Collections</h4>
    </p> 
    <p>
        Las collections implementan un m&eacute;todo protected <strong>_construct()</strong>. En dicho metodo
        se inicializa la collection con la definici&oacute;n del model y el resourceModel del cual
        va a obtener los datos y popular objetos. En el caso de nuestro ejemplo la collection es:
    </p>
    <pre><code class="language-bash">
    \Magento\Catalog\Model\ResourceModel\Product\Collection
    </code></pre>    
    <p>
        y el c&oacute;digo del metodo <strong>_construct()</strong> es:
    </p>
    
    <pre><code class="language-php">
    /**
     * Initialize resources
     *
     * @return void
     */
    protected function _construct()
    {
        if ($this->isEnabledFlat()) {
            $this->_init('Magento\Catalog\Model\Product', 'Magento\Catalog\Model\ResourceModel\Product\Flat');
        } else {
            $this->_init('Magento\Catalog\Model\Product', 'Magento\Catalog\Model\ResourceModel\Product');
        }
        $this->_initTables();
    }    
    </code></pre>
    <p>
        Si pudi&eacute;semos reemplazar:
    </p>
    <pre><code class="language-bash">
    Magento\Catalog\Model\Product
    </code></pre>    
    <p>
        por
    </p>
    <pre><code class="language-bash">
    Gnemes\Blog\Rewrite\Magento\Catalog\Model\Product
    </code></pre>
    <p>
        el c&oacute;digo funcionar&iacute;a perfectamente. Los par&aacute;metros enviados al m&eacute;todo <strong>_init()</strong> no 
        pasan por el ObjectManager (objeto que resuelve la inyecci&oacute;n de dependencias) y por
        ende, no es posible colocar la interfaz que implementa el objeto en lugar de la clase
        del objeto en si. Quiz&aacute;s ser&iacute;a bueno que esto se pueda hacer en alguna versi&oacute;n futura de Magento 2!
    </p>
    <p>
        <h4>Factories</h4>
    </p>
    <p>
        Los Factories autogenerados por Magento 2, son el otro punto en donde me tope con el mismo problema.
        El ObjectManager permite que se inyecte en un constructor algo como lo siguiente:
    </p>
    <pre><code class="language-php">
    public function __construct(
        \Magento\Catalog\Model\ProductFactory $productFactory
    ){
        $this->productFactory = $productFactory;
        ...
    }
    </code></pre>
    <p>
        ¿Que nos permite esto? Crear N objetos <strong>\Magento\Catalog\Model\Product</strong>
        simplemente pidi&eacute;ndole al Factory que lo cree:
    </p>
    <pre><code class="language-php">
    public function miMetodo()
    {
        ...
        $product = $this->productFactory->create();
        ...
    }
    </code></pre>
    <p>
        Muy f&aacute;cil!! Pero... cuando voy a buscar la clase factory a:
    </p>
    <pre><code class="language-bash">
    module-catalog
        └── Model
            └── ProductFactory.php
    </code></pre>
    <p>
        No existe! Pero el sitio anda... ¿De donde sali&oacute; la clase?. Magento 2 crea autom&aacute;ticamente los Factories
        necesarios dentro de la carpeta:
    </p>
    <pre><code class="language-bash">
    var
     └── Generation
           └── &lt;Namespace_de_la_clase&gt;
    </code></pre>
    <p>
        Si vemos el c&oacute;digo de la clase ProductFactory autogenerada por Magento:
    </p>
    <pre><code class="language-php">
    namespace Magento\Catalog\Model;

    /**
     * Factory class for @see \Magento\Catalog\Model\Product
     */
    class ProductFactory
    {
        /**
         * Object Manager instance
         *
         * @var \Magento\Framework\ObjectManagerInterface
         */
        protected $_objectManager = null;

        /**
         * Instance name to create
         *
         * @var string
         */
        protected $_instanceName = null;

        /**
         * Factory constructor
         *
         * @param \Magento\Framework\ObjectManagerInterface $objectManager
         * @param string $instanceName
         */
        public function __construct(\Magento\Framework\ObjectManagerInterface $objectManager, $instanceName = '\\Magento\\Catalog\\Model\\Product')
        {
            $this->_objectManager = $objectManager;
            $this->_instanceName = $instanceName;
        }

        /**
         * Create class instance with specified parameters
         *
         * @param array $data
         * @return \Magento\Catalog\Model\Product
         */
        public function create(array $data = array())
        {
            return $this->_objectManager->create($this->_instanceName, $data);
        }
    }    
    </code></pre>
    <p>
        vemos que el problema para nuestra situaci&oacute;n, es que Magento crea el Factory
        colocando como <strong>$instanceName</strong> la clase directamente, y no la interfaz que implementa.
    </p>
    <pre><code class="language-php">
        $instanceName = '\\Magento\\Catalog\\Model\\Product'
    </code></pre>    
    <p>
        <h4>¿C&oacute;mo hacer que funcione?</h4>
    </p>
    <p>
        Bien, llegados a este punto, para hacer que funcione el rewrite de la clase
        hay que cambiar la preference en el <strong>di.xml</strong> para que sea
        sobre la clase directamente, de la siguiente forma:
    </p>
    <pre><code class="language-xml">
    &lt;?xml version="1.0"?&gt;
    &lt;config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
            xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd"&gt;

        &lt;preference for="Magento\Catalog\Model\Product"
                    type="Gnemes\Blog\Rewrite\Magento\Catalog\Model\Product" /&gt;

    &lt;/config&gt;
    </code></pre>  
    <p>
        <h4>Conclusi&oacute;n</h4>
    </p>
    <p>
        Como coment&eacute; al comienzo del art&iacute;culo, este post ten&iacute;a como objetivo &uacute;nicamente
        ilustrar un escenario en el cual hay que andar con cuidado. Magento 2 se encuentra
        en un proceso evolutivo y estas cosas pueden ir variando, pero de momento
        esto es algo con lo que nos vamos a encontrar.
    </p>
    <p>
        En algunos pasajes del post me tom&eacute; el atrevimiento de proponer cambios
        al core de Magento 2, para que contemple estos casos puntuales. Las sugerencias
        que hice no son LA soluci&oacute;n a los problemas. La soluci&oacute;n a estos casos
        requiere de un an&aacute;lisis mucho mas profundo. No es posible hacer cambios 
        en el core del framework sin analizar que sucede en el resto del sistema. Por ejemplo,
        los test unitarios se ver&iacute;an afectados si se modifica la forma en que el
        ObjectManager resuelve las dependencias.
    </p>
    <p>
        Espero que les haya servido a quienes se estuvieron rompiendo la cabeza con
        esto o a quienes se la pueden llegar a romper :)
    </p>
</div>
{% endblock %}    
